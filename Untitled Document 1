main.dart

// import 'package:example/pages/custom_column_table.dart';
// import 'package:example/pages/custom_column_table.dart';
import 'package:example/pages/simple_table.dart';
import 'package:flutter/material.dart';
import 'package:example/pages/add_entry.dart';

void main() => runApp(MyApp());

class MyApp extends StatelessWidget {
  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      debugShowCheckedModeBanner: false,
      home: RootPage(),
      routes: {
        '/addEntry': (context) => FormHomePage(),
      },
    );
  }
}

class RootPage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return DefaultTabController(
      length: 1,
      child: Scaffold(
        body: TabBarView(
          children: <Widget>[
            // CustomColumnTable(),
            SimpleTable()
          ],
        ),
      ),
    );
  }
}


////=============================================================================

In models folder

1) content.dart

class Content {
  final String id;
  final String isActive;
  final String createdBy;
  final String createdOn;
  final String updatedBy;
  final String updatedOn;

  Content({this.id, this.createdBy, this.createdOn, this.updatedBy, this.updatedOn, this.isActive});

  factory Content.fromJson(Map<String, dynamic> json){
    return Content(
        id: json['id'] as String,
        createdBy : json['createdBy'].toString(),
        createdOn : json['createdOn'].toString(),
        updatedBy : json['updatedBy'].toString(),
        updatedOn : json['updatedOn'].toString(),
        isActive : json['isActive'].toString(),
    );
  }
}

////=============================================================================

In pages folder

1) json_table.dart

library json_table;

import 'package:flutter/material.dart';
import 'package:example/pages/json_table_column.dart';

typedef TableHeaderBuilder = Widget Function(String header);
typedef TableCellBuilder = Widget Function(dynamic value);

class JsonTable extends StatefulWidget {
  final List dataList;
  final TableHeaderBuilder tableHeaderBuilder;
  final TableCellBuilder tableCellBuilder;
  final List<JsonTableColumn> columns;
  final bool showColumnToggle;

  JsonTable(
    this.dataList, {
    Key key,
    this.tableHeaderBuilder,
    this.tableCellBuilder,
    this.columns,
    this.showColumnToggle = false,
  }) : super(key: key);

  @override
  _JsonTableState createState() => _JsonTableState();
}

class _JsonTableState extends State<JsonTable> {
  Set<String> headerList = new Set();
  Set<String> filterHeaderList = new Set();

  @override
  void initState() {
    super.initState();
    init();
  }

  void init() {
    assert(widget.dataList != null && widget.dataList.isNotEmpty);
    setHeaderList();
  }

  @override
  void didUpdateWidget(JsonTable oldWidget) {
    if (oldWidget.dataList != widget.dataList) init();
    super.didUpdateWidget(oldWidget);
  }

  @override
  Widget build(BuildContext context) {
    return SingleChildScrollView(
      scrollDirection: Axis.vertical,
      child: SingleChildScrollView(
        scrollDirection: Axis.horizontal,
        child: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: <Widget>[
            if (widget.showColumnToggle)
              Container(
                width: MediaQuery.of(context).size.width,
                child: Wrap(
                  runSpacing: -12,
                  direction: Axis.horizontal,
                  children: <Widget>[
                    for (String header in headerList)
                      Material(
                        color: Colors.transparent,
                        child: InkWell(
                          child: Row(
                            mainAxisSize: MainAxisSize.min,
                            children: <Widget>[
                              Checkbox(
                                value: this.filterHeaderList.contains(header),
                                onChanged: null,
                              ),
                              Text(header),
                              SizedBox(
                                width: 4.0,
                              ),
                            ],
                          ),
                          onTap: () {
                            setState(() {
                              if (this.filterHeaderList.contains(header))
                                this.filterHeaderList.remove(header);
                              else
                                this.filterHeaderList.add(header);
                            });
                          },
                        ),
                      )
                  ],
                ),
              ),
            if (widget.columns != null)
              Row(
                children: widget.columns
                    .map(
                      (item) => TableColumn(
                            item.label,
                            widget.dataList,
                            widget.tableHeaderBuilder,
                            widget.tableCellBuilder,
                            item,
                          ),
                    )
                    .toList(),
              )
            else
              Row(
                children: headerList
                    .where((header) => filterHeaderList.contains(header))
                    .map(
                      (header) => TableColumn(
                            header,
                            widget.dataList,
                            widget.tableHeaderBuilder,
                            widget.tableCellBuilder,
                            null,
                          ),
                    )
                    .toList(),
              )
          ],
        ),
      ),
    );
  }

  Set<String> extractColumnHeaders() {
    var headers = Set<String>();
    widget.dataList.forEach((map) {
      (map as Map).keys.forEach((key) {
        headers.add(key);
      });
    });
    return headers;
  }

  void setHeaderList() {
    var headerList = extractColumnHeaders();
    assert(headerList != null);
    this.headerList = headerList;
    this.filterHeaderList.addAll(headerList);
  }
}

class TableColumn extends StatelessWidget {
  final String header;
  final List dataList;
  final TableHeaderBuilder tableHeaderBuilder;
  final TableCellBuilder tableCellBuilder;
  final JsonTableColumn column;

  TableColumn(
    this.header,
    this.dataList,
    this.tableHeaderBuilder,
    this.tableCellBuilder,
    this.column,
  );

  @override
  Widget build(BuildContext context) {
    return IntrinsicWidth(
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.stretch,
        children: <Widget>[
          tableHeaderBuilder != null
              ? tableHeaderBuilder(header)
              : Container(
                  padding: EdgeInsets.symmetric(horizontal: 4.0, vertical: 2.0),
                  decoration: BoxDecoration(
                    border: Border.all(width: 0.5),
                    color: Colors.grey[300],
                  ),
                  child: Text(
                    header,
                    textAlign: TextAlign.center,
                    style: Theme.of(context).textTheme.display1.copyWith(
                          fontWeight: FontWeight.w700,
                          fontSize: 14.0,
                          color: Colors.black87,
                        ),
                  ),
                ),
          Container(
            child: Column(
              children: dataList
                  .map((rowMap) => Column(
                        crossAxisAlignment: CrossAxisAlignment.stretch,
                        children: <Widget>[
                          tableCellBuilder != null
                              ? tableCellBuilder(getFormattedValue(
                                  rowMap[column?.field ?? header]))
                              : Container(
                                  padding: EdgeInsets.symmetric(
                                      horizontal: 4.0, vertical: 2.0),
                                  decoration: BoxDecoration(
                                      border: Border.all(
                                    width: 0.5,
                                    color: Colors.grey.withOpacity(0.5),
                                  )),
                                  child: Text(
                                    getFormattedValue(
                                        rowMap[column?.field ?? header]),
                                    textAlign: TextAlign.center,
                                    style: Theme.of(context)
                                        .textTheme
                                        .display1
                                        .copyWith(
                                          fontSize: 14.0,
                                          color: Colors.grey[900],
                                        ),
                                  ),
                                ),
                        ],
                      ))
                  .toList(),
            ),
          )
        ],
      ),
    );
  }

  String getFormattedValue(dynamic value) {
    if (value == null) return column?.defaultValue ?? '';
    if (column?.valueBuilder != null) {
      return column.valueBuilder(value);
    }
    return value.toString();
  }
}



///==================================================================================

2) json_table_column.dart

typedef ValueBuilder = String Function(dynamic value);

class JsonTableColumn {
  String label;
  final String field;
  final String defaultValue;
  final ValueBuilder valueBuilder;

  JsonTableColumn(this.field,
      {this.label, this.defaultValue = '', this.valueBuilder}) {
    this.label = label ?? field;
  }
}

///==================================================================================

3) simple_table.dart

import 'dart:convert';
import 'dart:async';
import 'package:http/http.dart' as http;

import 'package:flutter/material.dart';
import 'package:json_table/json_table.dart';
import 'package:example/models/content.dart' show Content;


class SimpleTable extends StatefulWidget {
  @override
  _SimpleTableState createState() => _SimpleTableState();
}

class _SimpleTableState extends State<SimpleTable> {
  Future<List<dynamic>> getData(String link) async {
  List<Content> list;
    var future = http.get(Uri.encodeFull(link), headers: {"Accept": "application/json"});
        var res = await future;
    var rest;
    // print(res.body);
      if (res.statusCode == 200) {
        var data = json.decode(res.body);
        rest = data["content"] as List;
        // print(rest);
        list = rest.map<Content>((json) => Content.fromJson(json)).toList();
        print("List Size: ${rest.length}");
      } else {
      }
    return rest;
  }
  
  Widget tableViewWidget(List content){
    return Container(
        // padding: EdgeInsets.all(16.0),
        child: Column(
                children: [
                  JsonTable(
                    content,
                    showColumnToggle: false,
                    tableHeaderBuilder: (String header) {
                      // print(header);
                      return Container(
                        padding: EdgeInsets.symmetric(
                            horizontal: 8.0, vertical: 4.0),
                        decoration: BoxDecoration(
                            border: Border.all(width: 0.5),
                            color: Colors.grey[300]),
                        child: Text(
                          header,
                          textAlign: TextAlign.center,
                          style: Theme.of(context).textTheme.display1.copyWith(
                              fontWeight: FontWeight.w500,
                              fontSize: 20.0,
                              color: Colors.black87),
                        ),
                      );
                    },
                    tableCellBuilder: (value) {
                      return Container(
                        padding: EdgeInsets.symmetric(
                            horizontal: 4.0, vertical: 2.0),
                        decoration: BoxDecoration(
                            border: Border.all(
                                width: 0.5,
                                color: Colors.grey.withOpacity(1))),
                        child: Text(
                          value,
                          textAlign: TextAlign.center,
                          style: Theme.of(context).textTheme.display1.copyWith(
                              fontSize: 14.0, color: Colors.grey[900]),
                        ),
                      );
                    },
                  ),
                  SizedBox(
                    height: 40.0,
                  ),
                ],
              )
      );
  } 

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      appBar: AppBar(
        title: Text("Master Action Table"),
        actions: <Widget>[
          IconButton(icon: Icon(Icons.add),
          onPressed: (){
            Navigator.pushNamed(context, '/addEntry');
          },
        )],
      ),
      body: FutureBuilder(
        future: getData("https://my-json-server.typicode.com/21sudhanshu/jsonFlutter/db"),
        builder: (context, snapshot){
          // print(snapshot.data.toString());
          return (snapshot.data != null)
              ? tableViewWidget(snapshot.data)
              : Center(child: CircularProgressIndicator(),);
        },
      ),
    );
  }

    String getPrettyJSONString(jsonObject) {
    JsonEncoder encoder = new JsonEncoder.withIndent('  ');
    String jsonString = encoder.convert(json.decode(jsonObject));
    return jsonString;
  }
}

///==================================================================================

4) add_entry.dart

import 'package:flutter/material.dart';

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return new MaterialApp(
      title: 'Add New Entry',
      theme: new ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: new FormHomePage(title: 'Add New Entry'),
    );
  }
}

class FormHomePage extends StatefulWidget {
  FormHomePage({Key key, this.title}) : super(key: key);
  final String title;

  @override
  FormState createState() => new FormState();
}

class FormState extends State<FormHomePage> {
  final GlobalKey<FormState> _formKey = new GlobalKey<FormState>();

  @override
  Widget build(BuildContext context) {
    return new Scaffold(
      appBar: new AppBar(
        title: new Text("Form Page"),
      ),
      body: new SafeArea(
          top: false,
          bottom: false,
          child: new Form(
              key: _formKey,
              autovalidate: true,
              child: new ListView(
                padding: const EdgeInsets.symmetric(horizontal: 16.0),
                children: <Widget>[
                  new TextFormField(
                    decoration: const InputDecoration(
                      icon: const Icon(Icons.person),
                      hintText: 'Enter your first and last name',
                      labelText: 'Name',
                    ),
                  ),
                  new Container(
                      padding: const EdgeInsets.only(left: 40.0, top: 20.0),
                      child: new RaisedButton(
                        child: const Text('Submit'),
                        onPressed: null,
                      )),
                ],
              ))),
    );
  }
}
